webpackJsonp([28000586823834],{485:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Edgar Aroutiounian's website",author:"Edgar Aroutiounian"}},markdownRemark:{id:"/Users/Edgar/Repos/fxfactorial.github.io/src/pages/2017-01-10-objects-in-reason/index.md absPath of file >>> MarkdownRemark",html:'<p><em>This post was orginally written on <code>2017-01-10</code> and was in OCaml</em></p>\n<p>I like the <code>object</code> layer in ReasonML but here’s one quirk of the\nlanguage that sometimes I forget about and it can bite you…like I\njust got bit in my\n<code>OCaml</code>\n<a href="https://github.com/fxfactorial/ocaml-java-scriptengine">bindings</a> to\n<code>Java</code>’s <code>ScriptEngine</code>. (Let’s you evaluate <code>JavaScript</code> in <code>OCaml</code>\nusing the JVM)</p>\n<p>ReasonML lets you define an object like so: </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">thing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">as</span> _<span class="token punctuation">;</span>\n  pub speak <span class="token operator">=</span> <span class="token function">print_endline</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">thing</span><span class="token punctuation">)</span>#speak<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Note that <code>method</code>s don’t need arguments, they will always go off when\nyou call them.</p>\n<p>and you can also have fields</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">thing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">as</span> _<span class="token punctuation">;</span>\n  val coder <span class="token operator">=</span> <span class="token string">"coder"</span><span class="token punctuation">;</span>\n  val mutable name <span class="token operator">=</span> <span class="token string">"Edgar"</span><span class="token punctuation">;</span>\n  pub speak <span class="token operator">=</span> <span class="token function">print_endline</span><span class="token punctuation">(</span>name <span class="token operator">++</span> coder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  pub <span class="token function-variable function">set_name</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> name <span class="token operator">=</span> s<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">thing</span><span class="token punctuation">;</span>\n  p#speak<span class="token punctuation">;</span>\n  p#<span class="token function">set_name</span><span class="token punctuation">(</span><span class="token string">"Gohar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  p#speak<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Notice that we can also make fields <code>mutable</code> and they are private by\ndefault. </p>\n<p>Now here’s one situation you might encounter: </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">compute</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">as</span> _<span class="token punctuation">;</span>\n  val first_field <span class="token operator">=</span> Other_module<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  val second_field <span class="token operator">=</span> Some_module<span class="token punctuation">.</span><span class="token function">use_it</span><span class="token punctuation">(</span>first_field<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>This won’t work though because you can’t use one field in another\nfield.</p>\n<p>One solution might be: </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">compute</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> first_field <span class="token operator">=</span> Other_module<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> second_field <span class="token operator">=</span> Some_module<span class="token punctuation">.</span><span class="token function">use_it</span><span class="token punctuation">(</span>first_field<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">as</span> _<span class="token punctuation">;</span>\n  val first <span class="token operator">=</span> first_field<span class="token punctuation">;</span>\n  val second <span class="token operator">=</span> second_field<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Now question, are <code>first_field</code> and <code>second_field</code> created each time\na new instance of <code>compute</code> is made? </p>\n<p>…</p>\n<p>The answer is no and this might be counter intuitive to some, at least\nit was to me and I sometimes forget this.</p>\n<p>Verify it with: </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">thing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">print_endline</span><span class="token punctuation">(</span><span class="token string">"I was called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">as</span> _<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">thing</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">thing</span><span class="token punctuation">;</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>And see how many times <code>I was called</code> is printed to the screen; hence\nbe aware of this when you use objects in ReasonML.</p>',frontmatter:{title:"let binding in Reason class definitions",date:"January 10, 2017"}}},pathContext:{slug:"/2017-01-10-objects-in-reason/"}}}});
//# sourceMappingURL=path---2017-01-10-objects-in-reason-e28c3058f22c7154da2c.js.map