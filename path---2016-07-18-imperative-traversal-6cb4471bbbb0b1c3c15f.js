webpackJsonp([0x782707cef804],{482:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Edgar Aroutiounian's website",author:"Edgar Aroutiounian"}},markdownRemark:{id:"/Users/Edgar/Repos/fxfactorial.github.io/src/pages/2016-07-18-imperative-traversal/index.md absPath of file >>> MarkdownRemark",html:'<p><em>This post was orginally written on <code>2016-07-18</code> and was in OCaml</em></p>\n<p>OCaml/ReasonML tree examples tend to be defined with algebraic data\ntypes and tend to be functional examples. Here are two imperative tree\ntraversals, a pre-order and in-order. Iâ€™m still trying to work out a\nnice post-order imperative solution in OCaml/ReasonML so if you have\none then please tweet it at me: <a href=\'https://twitter.com/@edgararout\'>@edgararout</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>type <span class="token function">node</span><span class="token punctuation">(</span>\'a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mutable data<span class="token punctuation">:</span> \'a<span class="token punctuation">,</span>\n  mutable left<span class="token punctuation">:</span> <span class="token function">option</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>\'a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  mutable right<span class="token punctuation">:</span> <span class="token function">option</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>\'a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">new_node</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span> left<span class="token punctuation">:</span> None<span class="token punctuation">,</span> right<span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">,</span> new_data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  module Wrapper <span class="token operator">=</span> <span class="token punctuation">{</span>\n    exception Stop_loop<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> iter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">(</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>new_data <span class="token operator">&lt;</span> iter<span class="token operator">^</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> iter<span class="token operator">^</span><span class="token punctuation">.</span>left <span class="token punctuation">{</span>\n        <span class="token operator">|</span> None <span class="token operator">=></span>\n          iter<span class="token operator">^</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token function">new_node</span><span class="token punctuation">(</span>new_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token function">raise</span><span class="token punctuation">(</span>Wrapper<span class="token punctuation">.</span>Stop_loop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>left_tree<span class="token punctuation">)</span> <span class="token operator">=></span> iter <span class="token punctuation">:</span><span class="token operator">=</span> left_tree\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>new_data <span class="token operator">></span> iter<span class="token operator">^</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> iter<span class="token operator">^</span><span class="token punctuation">.</span>right <span class="token punctuation">{</span>\n        <span class="token operator">|</span> None <span class="token operator">=></span>\n          iter<span class="token operator">^</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token function">new_node</span><span class="token punctuation">(</span>new_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token function">raise</span><span class="token punctuation">(</span>Wrapper<span class="token punctuation">.</span>Stop_loop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>right_tree<span class="token punctuation">)</span> <span class="token operator">=></span> iter <span class="token punctuation">:</span><span class="token operator">=</span> right_tree\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">|</span> Wrapper<span class="token punctuation">.</span>Stop_loop <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">pre_order_traversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> s <span class="token operator">=</span> Stack<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> Stack<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> iter_node <span class="token operator">=</span> Stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Printf<span class="token punctuation">.</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> iter_node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">></span> print_string<span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> iter_node<span class="token punctuation">.</span>right <span class="token punctuation">{</span>\n    <span class="token operator">|</span> None <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">=></span> Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> s<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> iter_node<span class="token punctuation">.</span>left <span class="token punctuation">{</span>\n    <span class="token operator">|</span> None <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">=></span> Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> s<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">in_order_traversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  module W <span class="token operator">=</span> <span class="token punctuation">{</span>\n    exception Stop_loop<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> visited_stack <span class="token operator">=</span> Stack<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> iter_node <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">Some</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">(</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">/* Inner loop, we keep trying to go left */</span>\n      <span class="token keyword">try</span> <span class="token punctuation">(</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">switch</span> iter_node<span class="token operator">^</span> <span class="token punctuation">{</span>\n          <span class="token operator">|</span> None <span class="token operator">=></span> <span class="token function">raise</span><span class="token punctuation">(</span>W<span class="token punctuation">.</span>Stop_loop<span class="token punctuation">)</span>\n          <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">=></span>\n            Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> visited_stack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            iter_node <span class="token punctuation">:</span><span class="token operator">=</span> left<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token operator">|</span> W<span class="token punctuation">.</span>Stop_loop <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token comment">/* If we have no more to process in the stack, then we\'re\n         done */</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>Stack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>visited_stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">raise</span><span class="token punctuation">(</span>W<span class="token punctuation">.</span>Stop_loop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* Here we\'re forced to start moving rightward */</span>\n        <span class="token keyword">let</span> temp <span class="token operator">=</span> Stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>visited_stack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Printf<span class="token punctuation">.</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">></span> print_string<span class="token punctuation">;</span>\n        iter_node <span class="token punctuation">:</span><span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">|</span> W<span class="token punctuation">.</span>Stop_loop <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">print_spiral</span> <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span> Stack<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> left_to_right <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">(</span>a_<span class="token punctuation">,</span> b_<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">^</span><span class="token punctuation">,</span> b<span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    a <span class="token punctuation">:</span><span class="token operator">=</span> b_<span class="token punctuation">;</span>\n    b <span class="token punctuation">:</span><span class="token operator">=</span> a_<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> current<span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> Stack<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span>current<span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> r <span class="token operator">=</span> Stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span>current<span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>current<span class="token operator">^</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">></span> ignore<span class="token punctuation">;</span>\n    Printf<span class="token punctuation">.</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">></span> print_string<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>left_to_right<span class="token operator">^</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">switch</span> r<span class="token punctuation">.</span>left <span class="token punctuation">{</span>\n      <span class="token operator">|</span> None <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=></span> Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> next<span class="token operator">^</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">switch</span> r<span class="token punctuation">.</span>right <span class="token punctuation">{</span>\n      <span class="token operator">|</span> None <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> next<span class="token operator">^</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">switch</span> r<span class="token punctuation">.</span>right <span class="token punctuation">{</span>\n      <span class="token operator">|</span> None <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> next<span class="token operator">^</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">switch</span> r<span class="token punctuation">.</span>left <span class="token punctuation">{</span>\n      <span class="token operator">|</span> None <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">|</span> <span class="token function">Some</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=></span> Stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> next<span class="token operator">^</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Stack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>current<span class="token operator">^</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      left_to_right <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token operator">!</span> left_to_right<span class="token operator">^</span><span class="token punctuation">;</span>\n      <span class="token function">swap</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">new_node</span><span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">></span> List<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">pre_order_traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">print_newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">in_order_traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">print_newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">print_spiral</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',frontmatter:{title:"Imperatively traverse binary trees in ReasonML, print zigzag",date:"July 18, 2016"}}},pathContext:{slug:"/2016-07-18-imperative-traversal/"}}}});
//# sourceMappingURL=path---2016-07-18-imperative-traversal-6cb4471bbbb0b1c3c15f.js.map