<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>hyegar.com - All posts</title>
        <link>http://hyegar.com</link>
        <description><![CDATA[Personal blog of Edgar Aroutiounian]]></description>
        <atom:link href="http://hyegar.com/atom.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 07 May 2017 00:00:00 UT</lastBuildDate>
        <item>
    <title>Tech growth in Armenia, state of the industry</title>
    <link>http://hyegar.com/2017/05/07/tech-kicking-into-high-gear/index.html</link>
    <description><![CDATA[<p>The tech industry in Armenia is generating a lot of hype but much of it is written from the non-technical perspective so its mostly fluff and smoke. This short post is intended as a overview of the state of the industry in 2017, what technologies are hot, and what kinds of things you can expect if you move here.</p>
<p><strong>NOTE: Usual disclaimers, this is my point of view, intuitions, etc etc</strong></p>
<h1 id="technologies-and-getting-work">Technologies and Getting work</h1>
<p>Armenia is surprisingly ahead of our many neighbors in the tech stack of many businesses, for example compared to Lebanon we are more advanced. There‚Äôs still a lot of <code>PHP</code> and <code>Java</code> jobs but Armenia is picking up in using more modern and hot technologies like <code>React</code>, <code>ReactNative</code> and <code>nodejs</code> (I‚Äôd like to think I had something to do with that). Startups are starting to use those cooler technologies, older boring companies will be using the usual boring, soul-sucking enterprise tech.</p>
<div style="display:flex; justify-content:center">
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
Funny how marketing uses ‚Äúenterprise software‚Äù as a selling point, but to programmers this means something else. (i.e rubbish software)
</p>
‚Äî Stephen Diehl (<span class="citation">@smdiehl</span>) <a href="https://twitter.com/smdiehl/status/860904655257313280">May 6, 2017</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
<p>Now if you are talented and can demonstrate that preferably with public code on <code>github</code>, then you can get a job in 10 minutes so in that respect its like the Bay Area. Most of the companies aren‚Äôt large enough to justify having positions like Project Manager so programmers will have an easier time getting a job. If you can‚Äôt get a job as a programmer then it means you aren‚Äôt good enough yet so take it as an opportunity to improve yourself and learn something more relevant.</p>
<p>There‚Äôs also some <code>C++</code> work but you‚Äôll probably only want to deal with the good C++ places, aka the game developer studios; they are pretty good and at least know what <code>C++11</code> is.</p>
<h1 id="problems">Problems</h1>
<p>The industry does suffer from a lack of experienced, ‚Äòsenior‚Äô talent. The tech industry is especially subject to the problems of emigration as people are easily poached once they reach mid-level experience and technical ability. In my opinion what passes for ‚Äòsenior‚Äô level person in Armenia is really mid-level or less in the Bay Area and its not because the people are stupid but mostly because the people with the greatest potential physically up and leave the country. This has massive ripple effects as that knowledge is never passed down to others and companies cannot expand their workforce or quality of their code.</p>
<p>The plus side is that if you‚Äôre an programmer with real industry experience then you have a big chance to make an impact in a company that would take a bit longer than back home.</p>
<h1 id="places-to-hang-out">Places to hang out</h1>
<p>The country is starting to have regular tech events, so you can expect at least two cool tech events each week. These will be mostly at <a href="http://istc.am/en/">ISTC</a>, <a href="http://iteratehackerspace.com">iterate hackerspace</a> and at <a href="http://www.micarmenia.am">MICArmenia</a></p>]]></description>
    <pubDate>Sun, 07 May 2017 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2017/05/07/tech-kicking-into-high-gear/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Practical Armenia, my experience - Part two</title>
    <link>http://hyegar.com/2017/03/14/my-practical-armenia-part-two/index.html</link>
    <description><![CDATA[<p>This is part two from the my first <a href="./2017-03-12-my-practical-armenia">post</a>.</p>
<p>On mobile might need to scroll the pro-tip/anecdotes horizontally.</p>
<h1 id="financials">Financials</h1>
<p>Once in Armenia you‚Äôll need to get a feel for the prices and whatnot. You should need to spend at most 5,000 drams a day, that‚Äôs like $11.</p>
<pre><code>PRO-TIP: $11 is a slice of pizza and beverage in San Francisco. </code></pre>
<p>I can easily survive on just about 1,500 drams a day and I eat much better than I ever did in America.</p>
<p>Rent should be about at most $300 a month, which I think is quite fancy and in the city. I spent $250 a month last year during my first stay in Armenia in a very close to the center, Kentron, part of Yerevan, keep in mind that outside Kentron the prices are much cheaper.</p>
<p>You should also make an Armenian bank account, the Armenian financial system is surprisingly strong, although I suspect at the cost of massive government debt, and I like using AmeriaBank as they have a pretty good online banking experience and wire transfers from my American Chase account only take three days. The local branches are super-efficient and everyone knows Russian, probably English too.</p>
<h1 id="more-cultural-observations">More cultural observations</h1>
<p>If you don‚Äôt know Armenian, then be prepared to answer why you don‚Äôt know Armenian. Everyone will ask why you don‚Äôt know.</p>
<pre><code>PRO-TIP: Its a legitmate question, why don&#39;t you know Armenian?</code></pre>
<p>Sign up for an Armenian class ASAP, I really recommend ArmScoop‚Äôs class <code>Armenian as a foreign language</code> as its intensive, fast paced and immersive.</p>
<pre><code>ANECDOTE: I was outside my Yerevan apartment last
year and an older man started asking me something in Armenian. I
replied in Russian that I didn&#39;t know Armenian yet, he then asks
&#39;okay, well where is the local police station?&#39;. I told him I didn&#39;t
know that either, to which he said: &quot;You don&#39;t know Armenian, you
don&#39;t know where the police station is, what are you good for
anyway?&quot;...to which I told him I&#39;m an American Armenian and I moved
here. To that he replied, &#39;Ah well, good job son, you&#39;re a good
person&#39;.üòÑ</code></pre>
<h2 id="you-are-in-a-different-society">You are in a different society</h2>
<p>Society in general is quite a bit more conservative, but that doesn‚Äôt mean you can‚Äôt walk around with a Mohawk (at least in Yerevan you could)</p>
<p>that said‚Ä¶</p>
<ul>
<li><p>you can‚Äôt get shit faced drunk and pee on the station as if it was NYC‚Äôs union square at 2am because the metro is closed after 11pm, a real bummer, and someone would probably beat you up.</p></li>
<li><p>You can‚Äôt walk around yelling profanity or just about anything you want, people will shush you.</p></li>
</ul>
<pre><code>ANECDOTE: I was walking to the metro station on a street 
filled with shopkeepers. In front of me was a mother 
with a child in her arm, kid was on verge of tears but
the mother&#39;s soothing kept him just on the 
precipice. As we walked down the street literally every 
shopkeeper pitched in to help keep the kid calm. That would 
never happen in NYC America or SF America, maybe in the
American Southern states.</code></pre>
<pre><code>PRO-TIP: This is a preferable society.</code></pre>
<p>You <em>really</em> feel more connected to other humans and especially as a Diasporan coming to Armenia proper as you‚Äôve made a conscious effort to change the course of this society.</p>
<pre><code>PRO-TIP: You will feel very good when you see the 
fruits of your labor.</code></pre>
<h2 id="the-only-culture-shock">The only culture shock</h2>
<p>Maybe because I grew up in a Russian environment, that is Russian at home and being a Brooklyn kid, I didn‚Äôt have all that much culture shock other than gender relations here which are quite a bit more conservative than San Francisco, for example, but then again which society isn‚Äôt? My biggest culture mismatch mostly related to dating as it‚Äôs pretty hard to get women to physically meet you and sex before marriage is mostly a myth, almost a double tragedy is that the girls here are much prettier than in America and dress on average much better.</p>
<pre><code>PRO-TIP: Your intuitions will be busted, need to adjust.</code></pre>
<h2 id="effort">Effort</h2>
<p>So not everything is 100% ideal in Armenia, but for the things I‚Äôve lost there‚Äôs a lot that I gained.</p>
<ul>
<li><p>Living costs are way cheaper, if you‚Äôre a programmer you can still work Western wages but remotely.</p></li>
<li><p>The food is way better, no need waste $150 going to Whole Foods each time.</p></li>
<li><p>The women want families and husbands, culture emphasizes family.</p></li>
<li><p>The country is small, talented &amp; technically competent people can make changes that rapidly affect many people, you can see the results quickly.</p></li>
<li><p>You are living in our ancestral homeland of 3,000 years and are working directly to make it stronger, richer, happier.üá¶üá≤</p></li>
</ul>]]></description>
    <pubDate>Tue, 14 Mar 2017 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2017/03/14/my-practical-armenia-part-two/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Practical Armenia, my experience - Part one</title>
    <link>http://hyegar.com/2017/03/12/my-practical-armenia/index.html</link>
    <description><![CDATA[<h1 id="motivations">Motivations</h1>
<p>My friend Vartan Marashlyan from Repat Armenia asked me to write some blog posts about what I thought would be practical to the Professional Armenian diaspora writ large. I‚Äôm writing this in the hopes that it will dispel nonsensical, toxic myths about Armenia and inspire many more talented young professionals in the Armenian worldwide Diaspora to give Armenia a chance.</p>
<p><em>Keep in mind that this is my point of view</em></p>
<p>See part two <a href="./2017-03-14-my-practical-armenia-part-two">here</a></p>
<p>On mobile might need to scroll the pro-tip/anecdotes horizontally.</p>
<h1 id="about-me">About me</h1>
<p>I don‚Äôt want to waste too much time talking about myself so I will keep it brief. My name is Edgar Aroutiounian, I‚Äôm a 27-year-old Armenian-American and I was born in T‚Äôbilisi. In 1993 my family immigrated to the United States and I was raised in New York City then spent teenage years in Florida, started adult life back in NYC and finally moving to San Francisco for a neat career opportunity.</p>
<p>Growing up I spoke Russian at home, no Armenian, I was never taught it. Career wise I am a polyglot programmer, which means I work comfortably in multiple domains, programming languages. Basically, if it involves programming, I can do it.</p>
<p>During Mid-2016 I decided to drop everything and move to Armenia.</p>
<h2 id="going-to-armenia-the-build-up">Going to Armenia, the build up</h2>
<p>In late 2015 I read <code>My Brother's Road</code>, a book about one of my childhood heroes, Monte Melkonian. The book started something in me that I didn‚Äôt realize at the time would push me over the Atlantic. At the time I working at a San Francisco startup, living in Oakland; my job was to reverse engineer <code>iOS</code>. By April 2016 I had left that startup and was being courted by <code>Facebook</code>, and <code>Google</code>. Funny story, I have hung up Google twice out of nervousness during the second stage programmer phone interview (I choked).</p>
<p>April 2016 was of course the Four-day war in <code>Artsakh</code> when Azerbaijan attacked our homeland, that bothered me greatly. Around that time my personal life was falling apart as well, I lost my closest person, and that was entirely my fault; I am still recovering from that. Then in mid July the Sasna Tsrer crisis happened and I read what the war heroes said, I realized that the previous generation had given up so much to establish Armenia &amp; Artsakh as independent entities but now the State was faltering, stagnating and going nowhere fast. Our enemies also knew this and so did the native population, (30% of the Armenian native population has physically left Armenia). So I decided to stop everything and go to Armenia, I decided that on a Tuesday, told my then girlfriend that I would pay for her airplane ticket to come with me. By Thursday I had bought the tickets and by that following Sunday I was in Yerevan, that was <code>August 1st 2016</code>.</p>
<p>(Actually, I didn‚Äôt even have housing before landing, I secured it on AirBnb right in front of the gate as the connection flight from Doha to Yerevan was boarding).</p>
<h2 id="landing-in-armenia">Landing in Armenia</h2>
<p>I don‚Äôt have any blood relatives in Armenia so no one met me at the airport and I was subsequently ripped off by my first taxi driver in the country, I didn‚Äôt have an intuition yet about dram values. My first place, the AirBnb, was in Erebuni and was decent. I had always read that the Caucasus region was known for its hospitality so I figured I could basically wing it, and by ‚Äòit‚Äô I mean literally everything. On day three in the country I attended a movie screening at <code>AUA</code>, the American University of Armenia, and after the movie was over I announced who I was and what I was doing. Truth be told I didn‚Äôt know what I was doing but I did say that I was a programmer from San Francisco and I wanted to help the country become better in whatever way I could. Afterward some students came up to me and I started making friends, one of whom later got me a hookup for renting an Apartment from his extended family. With housing secured I could focus on work.</p>
<pre><code>PRO-TIP: You need to be talking to as 
many people as possible but also
filter out the negative people.</code></pre>
<pre><code>MISCONCEPTION: Armenia/Yerevan 
is a dangerous 
place where you have to
pay mafia people for 
everything and anything.

REALITY: Completely bullshit. 
Yerevan is incredibly safe and I never
had to deal with any shady people. 
Oakland, CA is more dangerous than
Yerevan, Yerevan doesn&#39;t have LA style 
drive bys or NYC style random beatings.</code></pre>
<h2 id="establishing-myself">Establishing myself</h2>
<p>Up to that time I didn‚Äôt have Facebook, ironic as I was interviewing with them in <code>Menlo Park, CA</code>, but I soon realized that Armenia lives on Facebook so I had to make an account. I started talking to many people, as many as I could and that meant meeting many people in coffee shops, basically two people a day for about three weeks.</p>
<pre><code>PRO-TIP: Respect yourself and worth. 
Many people will see you as a
goldmine or bag of money. Respectfully 
listen and say you will get
back with an answer, 
always be professional.</code></pre>
<p>Initially I set up roots in <code>Impact Hub</code>, but left within two weeks after I realized that their visions did not align with mine. I have strong opinions and I think that <code>NGOs</code> in general have failed Armenia and that business, profit making, employing people is the smartest way to build the country up ASAP. Being a programmer, I started looking for more serious directly involved tech people and started thinking about what I was missing.</p>
<pre><code>PRO-TIP: Don&#39;t waste any time if 
visions don&#39;t align, move on.</code></pre>
<p>Around the end of August, I came up with the idea of a hackerspace, a place where programmers could meet up and exchange ideas, work on projects together. Nothing of the sort existed at the time and I started networking to find willing hosts.</p>
<pre><code>PRO-TIP: You need to know more than 
just English to get anything
serious done, Russian does great.</code></pre>
<p>I started with the usual suspects, <code>AUA</code>, <code>TUMO</code>, etc. but was greeted with basically the same replies of ‚ÄúOh that‚Äôs a great idea‚Äù but when push came to shove, aka providing a physical place &amp; computers, then everyone became suddenly shy. <code>TUMO</code> especially surprised me in their rejection as at the time the entire upper two floors were completely empty.</p>
<pre><code>PRO-TIP: Never get discouraged.</code></pre>
<p>I also met with many Armenian local tech companies, but then backed out of relationships with some of them once I realized that they wanted me to be effectively a free trainer for their workers, teaching specifically, their technologies and not the ideological freedom that I needed.</p>
<pre><code>PRO-TIP: Cultural pressure to do what 
people what you to do is much
more powerful in Armenia than in America.</code></pre>
<p>Eventually I met the right people at the Innovative Solution &amp; Technologies Center, ISTC, and they took a chance on the idea, the very day of being given the green light I started the first coding working shops.</p>
<pre><code>REALITY: Any diaspora Armenian doing useful 
things in Armenia will be
warmly greeted, accepted. People know its 
odd for someone to leave
wealth for Armenia, you will be appreciated 
especially if you&#39;re from
tech since its basically the most important and 
growing industry. I
have never NOT ONCE ever felt like a 
stranger in Armenia, always loved.</code></pre>
<h2 id="tech-scene-resources">Tech scene, resources</h2>
<pre><code>MISCONCEPTION: Armenia is broke, 
nothing works, everything is old.

REALITY: My internet speed in Yerevan 
was faster that what I got in
Silicon Valley. Physical infrastructure 
is pretty good, the metro
system is limited to basically the center 
of Yerevan but its cheap,
like 20 cents a ride. People have the latest 
iPhones, iMacs...lack of
physical tech is not a problem.</code></pre>
<p>The tech scene is doing well and everyone is in a way pinning their hopes on it, however what‚Äôs lacking now are people with real industry experience who are also willing to share that knowledge.</p>
<pre><code>PRO-TIP: You need to always be 
maintaining your relationships,
otherwise they decaying.</code></pre>
<h2 id="professionalism">Professionalism</h2>
<p>Armenia is still developing in this aspect, so expect everyone to be late at least 15 minutes to everything. The general pace of things is a noticeably slower than what a New Yorker or SF techie might be used to, example: it‚Äôs rare for people to walk up the escalator or to use the left side as passing‚Ä¶which for a New Yorker like me‚Ä¶is maddening. Although I am happy to not have to do the <code>PATH WTC</code> train commute, that sucked.</p>
<pre><code>PRO-TIP: Don&#39;t lower your standards but 
be cognizant of cultural diffferences.</code></pre>
<p>This is it for now, tweet me at for feedback <a href="https://twitter.com/EdgarArout">‘∑’§’£’°÷Ä</a>.</p>]]></description>
    <pubDate>Sun, 12 Mar 2017 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2017/03/12/my-practical-armenia/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Hacks, cracks, dev culture and Armenia's development in tech üá¶üá≤</title>
    <link>http://hyegar.com/2017/02/12/excellence-security-culture-armenia/index.html</link>
    <description><![CDATA[<h3 id="audience">Audience</h3>
<hr/>
<p>This post is intended for both technical and non-technical people; its for people interested in the development of programmers, cultures of professionalism, security, and the development of Armenia as a tech power. Along the way I will show some security vulnerabilities of well-known sites in Armenia, non-technical people will be able to follow along as everything will be explained. I will also introduce the concept of a bug bounty exchange.</p>
<p>A glossary of technical terms follows the post, might be worth while to read through those terms first.</p>
<p><strong>I want to emphasis that the point of this blog post is not to shame or make fun of any individual or company, rather it is meant to bring attention to the tech industry, culture in Armenia and what can be done to further it to a higher average level of excellence and professionalism.</strong></p>
<h3 id="problem">Problem</h3>
<hr/>
<p>Specifically, with respect to Armenia, much has been said about the tech as a shining example of an honest and rapidly growing industry. However, in my view much of that has been pushed by people who frankly are little connected to the tech industry writ tech itself. There are not enough voices heard from the down in the trenches folks who can provide a truly informed voice.</p>
<p>Armenia‚Äôs geopolitical situation being what it is makes the tech industry arguably of high interest to national security as:</p>
<ol style="list-style-type: decimal">
<li>A robust engine of sustained, organic economic growth. A nation cannot wage wars or devote high levels of resources to its military without a resilient economy. A strong economy lets us negotiate with our enemies from a position of strength.</li>
<li>As a nursery and pipeline for cyber-security. Armenians are disproportionality effective in every domain, the digital realm amplifies that 100X.</li>
</ol>
<p>For the development of countries, it is better to see a country of makers and not outsourcers. Why? Because making products, like Uber, Facebook, etc, is what makes the biggest bucks of all and is best able to utilize the Armenian people‚Äôs creative talents. Working as outsourcing tends to make decent but soulless products, and such products are made by programmers who simply don‚Äôt care about what they‚Äôre making beyond the salary paid. (Hardly eudaimonia)</p>
<p>With that, Armenia has a lot of outsourcing but the product scene is coming along nicely although we haven‚Äôt even seen our first largish failure yet.</p>
<p>Here are two intertwined things I see in the Armenian tech scene that need more attention &amp; sustained improvement.</p>
<div style="display: inline-flex;justify-content: center;width: 100%;">
<table>
<thead>
<tr class="header">
<th>Problem</th>
<th align="center">Fixable</th>
<th>Solution</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Hacker, developer culture lagging</td>
<td align="center"><strong>Yes</strong></td>
<td>Invest more in people</td>
</tr>
<tr class="even">
<td>Cyber-security</td>
<td align="center"><strong>Yes</strong></td>
<td>Invest more in people</td>
</tr>
</tbody>
</table>
</div>
<p>What do I mean by developer culture? In a way, it‚Äôs like professionalism in other fields which is characterized by devotion to your craft, not cutting corners, doing things the right way even when it takes longer and deeply learning the tools of your craft. Sometimes in Armenian culture people like to cut corners, this is a fact. Examples include cutting corners in Gyumri‚Äôs apartment construction which led to worse outcomes in the 1988 earthquake to the elevator in my building whose buttons were always off by one. There‚Äôs an implicit acceptance of a shrugging your shoulders quality work and it is reflected in the tech industry as well.</p>
<h3 id="examples-of-shortcoming">Examples of shortcoming</h3>
<hr/>
<p>Now let‚Äôs look at a few examples of the manifestations of these shortcomings. I will now show you three examples of live web vulnerabilities of three sites in Armenia, each of which was told that a problem existed but didn‚Äôt pursue a fix initially although one has been fixed. All three of them are the result of similar entry level mistakes.</p>
<p>I found out about these exploits after first posting in the Facebook iterate chatroom about bots attacking <a href="https://silicondzor.com">silicondzor.com</a></p>
<div style="display: inline-flex;justify-content: center;width: 100%;">
<div class="figure">
<img src="/images/bots.png" />

</div>
</div>
<p>This image is from a server log for <code>silicondzor.com</code>. See the line <code>GET /.git/ HTTP/1.1</code>? That‚Äôs a bot checking if it can get our entire git repo, all our source code. After posting that, <code>Sparik Hayrapetyan</code> reached out to me and reported some Armenian sites that were vulnerable to this very exploit!</p>
<p>I verified some of those site and here are how damning it is‚Ä¶</p>
<p>Say we have three websites each ending in a <code>.am</code> TLD:</p>
<p><em>(the creator field is from attributes given on the public facing sites)</em></p>
<div style="display: inline-flex;justify-content: center;width: 100%;">
<table>
<thead>
<tr class="header">
<th>Site</th>
<th align="center">Subject matter</th>
<th>exploit</th>
<th>creator</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>siteA</td>
<td align="center">auction</td>
<td>Full git repo, found credentials</td>
<td><a href="http://voodoo.pro/en" class="uri">http://voodoo.pro/en</a></td>
</tr>
<tr class="even">
<td>siteB</td>
<td align="center">car rental</td>
<td>Full git repo, found credentials</td>
<td>sitemax</td>
</tr>
<tr class="odd">
<td>siteC</td>
<td align="center">reading materials</td>
<td>Full git repo</td>
<td><a href="https://www.studio-one.am" class="uri">https://www.studio-one.am</a></td>
</tr>
</tbody>
</table>
</div>
<p>What does it mean to have the full git repo? It means to have the entire history of the source code from beginning to end.</p>
<p>Verification pics:</p>
<h3 id="sitea-the-auction-site">SiteA ‚Äì the auction site</h3>
<p>First about the programmer culture, this particular code base uses PHP. A programming language known to be inherently defective in security and one that is usally avoided for new projects in Silicon Valley.</p>
<div style="display: inline-flex;justify-content: center;width: 100%;">
<div class="figure">
<img src="/images/generated-code-site-a.png" />

</div>
</div>
<p>Not only are they using PHP, they are also using an IDE to <strong>generate</strong> PHP code.</p>
<p>Another bad practice they have their passwords in the source code. Hint: this is never a good idea. Since as an auction site they are handling all kinds of credit cards and other sensitive information and now any attacker, including me potentially have access to it all. (Programmers: A better solution is to use environment variables)</p>
<div style="display: inline-flex;justify-content: center;width: 100%;">
<div class="figure">
<img src="/images/credentials-site-a.png" />

</div>
</div>
SiteA also exposed their <strong>SQL</strong> on the public website
<div style="display: inline-flex;justify-content: center;width: 100%;">
<div class="figure">
<img src="/images/sql-dumped.png" />

</div>
</div>
<h3 id="siteb-car-rental-site">SiteB ‚Äì Car rental site</h3>
<p>The car rental site required a little bit more work to reconstruct the original git repo. Thankfully using tools like <a href="https://github.com/internetwache/GitTools">GitTools</a> makes the process painless and after some searching through the source code I found this goodie. These are credentials to the database which being a car rental site also probably contains some nice credit card numbers, accounts.</p>
<div style="display: inline-flex;justify-content: center;width: 100%;">
<div class="figure">
<img src="/images/site-b-mysql-creds.png" />

</div>
</div>
<h3 id="sitec-reading-materials">SiteC ‚Äì Reading materials</h3>
<p>I didn‚Äôt dig too deeply in this repo but here‚Äôs an example structure. The indentation means hierarchy of directories and files, things ending in <code>.php</code> are source code files.</p>
<div style="display: inline-flex;justify-content: center;width: 100%;">
<div class="figure">
<img src="/images/site-c.png" />

</div>
</div>
<p>Studio-One proudly boasts of its clients including <code>AmeriaBank</code> and the <code>National Assembly of RA</code>. How much do you want to bet that they do similar sloppy coding across all these projects?</p>
<div style="display: inline-flex;justify-content: center;width: 100%;">
<div class="figure">
<img src="/images/site-c-boast.png" />

</div>
</div>
<p>Again this exploit was rather simple, it was a rookie mistake.</p>
<h3 id="bug-bounties">Bug Bounties</h3>
<p>Now as I mentioned Sparik first reported exploits to the respective site owners but amazingly some didn‚Äôt even reply or simply asked him leave his email address, the de facto equivalent of ‚ÄúDon‚Äôt call us, we‚Äôll call you‚Äù. Amazingly Sparik wasn‚Äôt compensated at all or recognized! I reached out as well but only one replied and has since fixed the mistakes.</p>
<p>Many other companies would have paid him under a system called a <code>bug bounty</code>. This is when companies pay whoever finds exploits on their website/app/program under a structured disclosure method. The idea is that it is better for the company to pay to know about the exploit, fix it, and move on rather than have the exploit end up on the black market and then hit them out in the wild. An example of this is the Target hacking, that cost over $100 Million in damages. Facebook has been running their bug bounty since 2011 with great success, some payouts reach $40,000 which is still substantially less than what can happen when someone malicious literally has all the passwords to your databases and computers. To my knowledge, there are no companies in Armenia that run a bug bounty.</p>
<h3 id="mitigation">Mitigation</h3>
<p>How can we mitigate these kinds of exploits? Well in a way its simple but also hard &amp; vague; we do it by:</p>
<ol style="list-style-type: decimal">
<li><p>Promoting a culture of people open about knowledge, about promoting collerboration. This particular exploit is talked about in just about every other InfoSec meetup in San Francisco and is well known but in Armenia a seemingly prominent firm is repeatedly making it. Practically speaking this means more meetups. A check on <a href="https://silicondzor.com">silicondzor.com</a> shows 53 events in Feburary for Armenia, that number needs to be higher and a higher percentage needs to be programmers talking to other programmers, not fluff sessions about Marketing/Startups. The meetups should lean toward being workshops with hands on examples and live coding.</p></li>
<li><p>Sponsoring bug bounties, especially starting with Government &amp; military websites.</p></li>
<li><p>Having more events like the recent <a href="https://www.facebook.com/events/642338025891387">Capture the Flag</a> which literally included the exploit used in this blog post.</p></li>
<li><p>Promoting a culture of professionalism &amp; respect for programmers. Programmers are not respected as crafts people in Armenia.</p></li>
<li><p>Collective funding of talent. The entire Armenian tech industry needs to be willing to spend some money on the collective pool of talent. This means like non-trivial prizes for hackathon, paid bug bounties, paid trainings Armenian culture in general does not promote doing things for free, or helping someone without expecting something in return implicitly.</p></li>
<li><p>Promoting and funding projects that protect critical internet infrastructure for Armenia, like <a href="https://www.trusted-introducer.org/directory/teams/cert-am.html">CERT-AM</a></p></li>
</ol>
<p>Keep in mind that many of these are happening one way or another, I am merely enumerating some for record. Because I believe in <strong>doing</strong> and not merely speaking, I will be creating a public bug bounty exchange for all of Armenia, it will be listed on <a href="https://silicondzor.com">silicondzor.com</a>. Once it is up, I encourage all companies, not just tech companies, to post on the bug bounty exchange with offers of payment for successful examples of exploits.</p>
<h3 id="parting">Parting</h3>
<p>(While writing this post a new story broke out of crackers attacking Armenian banks, <a href="http://hetq.am/eng/news/75680/hackers-infiltrate-computer-system-of-bank-in-armenia-steal-$273000.html">Hackers Infiltrate Computer System of Bank in Armenia; Steal $273,000</a>, I think you could see the connections of what I‚Äôm trying to say; forget criminals for a moment and now imagine a nation-state determined to destroy us.)</p>
<p>There is a lot of hype and excitement for tech in Armenia and it holds a huge promise, but we must grow our industry, talent correctly. In addition, because the topic is Armenia, we must keep in mind about security as cyber-security is increasingly the first line of attack and defense in war. Would our enemies be so kind as to tell us about exploits on our banking sites? Or perhaps military sites or other critical government? What about the electrical system or other critical infrastructure that is increasingly connected to the internet. How effective are <code>Iskanders</code> when someone hacks and reprograms them mid-flight? These questions show the level to which tech, economy and national security are all interrelated in Armenia and the level of responsibility the tech industry has to Armenia.</p>
<h3 id="glossary">Glossary</h3>
<p>Note:</p>
<ol style="list-style-type: decimal">
<li>Non-technical people, you should probably start learning the jargon.</li>
<li>Technical people, these are loose definition meant for intuition rather than accuracy.</li>
</ol>
<p><strong>source code</strong>: The original code of a program, written by a programmer. This can be publicably available or private, usually when its private then it has things like passwords written in it.</p>
<p><strong>exploit</strong>: A mistake in the source code which then lets another person use that mistake to cause a program to do something other than originally intended. I.E. if I find an exploit in the ATM machine, then maybe I can get it to spit out money.</p>
<p><strong>InfoSec</strong>: Short for information security, its a subfield of programming culture and include a focus on security.</p>
<p><strong>cracker</strong>: A professional hacker who attacks programs, products for money usually.</p>
<p><strong>pentest</strong>: Short for penetration testing, its when you pay a infosec professional to attack your product as if they were a cracker.</p>
<p><strong>DDoS</strong>: This is when someone abuses whatever service you are providing by overwhelming you with too many requests for that service thereby bringing the whole system down.</p>
<p><strong>git</strong>: A program used by programmers to help them keep track of all the source code they write, down to the detail of which line of code was written by whom, when.</p>
<p><strong>repo</strong>: A directory on the hard drive of a computer created by the git program. It contains all the source code and whatever else the programmers decided to keep track of in the project.</p>
<p><strong>commit</strong>: Something created by git that is like a collection of saves of source code. Think of it like a record in time of how the source code look like.</p>
<p><strong>TLD</strong>: Top level domain, basically the <code>.com</code> or <code>.am</code> part of a website name.</p>
<p><strong>IDE</strong>: A program that some programmers use to help them make new programs, think of it like a fancy word processor with auto completion.</p>
<p><strong>SQL</strong>: A programming language designed for databases. If I know your SQL then I know how your data is organized, stored, and what I should be looking for once I get into your system.</p>
<p><strong>bots</strong>: Computer programs designed to do boring, repetitive things. In this post it refers to programs designed to search the web for simple, rookie level exploits.</p>]]></description>
    <pubDate>Sun, 12 Feb 2017 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2017/02/12/excellence-security-culture-armenia/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>let binding in OCaml class definition</title>
    <link>http://hyegar.com/2017/01/10/small-ocaml-object-annoyance/index.html</link>
    <description><![CDATA[<p>I like the <code>object</code> layer in OCaml but here‚Äôs one quirk of the language that sometimes I forget about and it can bite you‚Ä¶like I just got bit in my <code>OCaml</code> <a href="https://github.com/fxfactorial/ocaml-java-scriptengine">bindings</a> to <code>Java</code>‚Äôs <code>ScriptEngine</code>. (Let‚Äôs you evaluate <code>JavaScript</code> in <code>OCaml</code> using the JVM)</p>
<p>OCaml lets you define an object like so:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">class</span> thing = <span class="kw">object</span>
  <span class="kw">method</span> speak = <span class="dt">print_endline</span> <span class="st">&quot;Hello&quot;</span>
<span class="kw">end</span>

<span class="kw">let</span> () = (<span class="kw">new</span> thing)#speak</code></pre></div>
<p>Note that <code>method</code>s don‚Äôt need arguments, they will always go off when you call them.</p>
<p>and you can also have fields</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">class</span> thing = <span class="kw">object</span>
  <span class="kw">val</span> coder = <span class="st">&quot;coder&quot;</span>
  <span class="kw">val</span> <span class="kw">mutable</span> name = <span class="st">&quot;Edgar&quot;</span>

  <span class="kw">method</span> speak = <span class="dt">print_endline</span> (name ^ coder)
  <span class="kw">method</span> set_name s = name &lt;- s
<span class="kw">end</span>

<span class="kw">let</span> () = 
  <span class="kw">let</span> p = <span class="kw">new</span> thing <span class="kw">in</span>
  p#speak;
  p#set_name <span class="st">&quot;Gohar&quot;</span>;
  p#speak</code></pre></div>
<p>Notice that we can also make fields <code>mutable</code> and they are private by default.</p>
<p>Now here‚Äôs one situation you might encounter:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">class</span> compute = <span class="kw">object</span>
  <span class="kw">val</span> first_field = Other_module.init ()
  <span class="kw">val</span> second_field = Some_module.use_it first_field
<span class="kw">end</span></code></pre></div>
<p>This won‚Äôt work though because you can‚Äôt use one field in another field.</p>
<p>One solution might be:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml">
<span class="kw">class</span> compute = 

  <span class="kw">let</span> first_field = Other_module.init () <span class="kw">in</span>
  <span class="kw">let</span> second_field = Some_module.use_it first_field <span class="kw">in</span>
  <span class="kw">object</span>
    <span class="kw">val</span> first = first_field
    <span class="kw">val</span> second = second_field
  <span class="kw">end</span></code></pre></div>
<p>Now question, are <code>first_field</code> and <code>second_field</code> created each time a new instance of <code>compute</code> is made?</p>
<p>‚Ä¶</p>
<p>The answer is no and this might be counter intuitive to some, at least it was to me and I sometimes forget this.</p>
<p>Verify it with:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">class</span> thing =
  <span class="kw">let</span> foo = <span class="dv">1</span> + <span class="dv">2</span> <span class="kw">in</span>
  <span class="kw">let</span> () = <span class="dt">print_endline</span> <span class="st">&quot;I was called&quot;</span> <span class="kw">in</span>
  <span class="kw">object</span>

  <span class="kw">end</span>


<span class="kw">let</span> () =
  <span class="kw">let</span> a = <span class="kw">new</span> thing <span class="kw">in</span>
  <span class="kw">let</span> b = <span class="kw">new</span> thing <span class="kw">in</span>
  ()</code></pre></div>
<p>And see how many times <code>I was called</code> is printed to the screen; hence be aware of this when you use objects in OCaml.</p>]]></description>
    <pubDate>Tue, 10 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2017/01/10/small-ocaml-object-annoyance/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Calling Google Closure programmatically</title>
    <link>http://hyegar.com/2017/01/09/calling-google-closure/index.html</link>
    <description><![CDATA[<p>This is a pretty neat post, I‚Äôll show you how to programmatically call <a href="https://github.com/google/closure-library">Google Closure</a> in Java. Closure is an amazing project that actually optimizes <code>JavaScript</code> rather than just minifies it. (This is pretty much one of the few times you‚Äôll see me write Java, I think the language sucks).</p>
<p>Its mostly a 2017 update of this <a href="http://blog.bolinfest.com/2009/11/calling-closure-compiler-from-java.html">post from 2009</a></p>
<p>Here‚Äôs the Java</p>
<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="kw">package</span><span class="im"> com.hyegar.closure;</span>

<span class="kw">import</span><span class="im"> java.io.IOException;</span>
<span class="kw">import</span><span class="im"> java.util.List;</span>
<span class="kw">import</span><span class="im"> java.util.ArrayList;</span>

<span class="kw">import</span><span class="im"> com.google.javascript.jscomp.CompilationLevel;</span>
<span class="kw">import</span><span class="im"> com.google.javascript.jscomp.Compiler;</span>
<span class="kw">import</span><span class="im"> com.google.javascript.jscomp.CompilerOptions;</span>
<span class="kw">import</span><span class="im"> com.google.javascript.jscomp.SourceFile;</span>
<span class="kw">import</span><span class="im"> com.google.javascript.jscomp.CommandLineRunner;</span>
<span class="kw">import</span><span class="im"> com.google.javascript.jscomp.CompilerOptions.LanguageMode;</span>

<span class="co">/**</span>
<span class="co"> * An example of how to call the Closure Compiler programmatically, </span>
<span class="co"> * this is LICENSED AS GPL-3.0.</span>
<span class="co"> *</span>
<span class="co"> * </span><span class="kw">@author </span><span class="co">edgar.factorial@gmail.com (Edgar Aroutiounian)</span>
<span class="co"> */</span>

<span class="kw">public</span> <span class="kw">class</span> CallCompiler {

    <span class="co">/**</span>
<span class="co">     * </span><span class="kw">@param code </span><span class="co">JavaScript source code to compile.</span>
<span class="co">     * </span><span class="kw">@return </span><span class="co">The compiled version of the code.</span>
<span class="co">     */</span>
    <span class="kw">public</span> <span class="dt">static</span> <span class="bu">String</span> <span class="fu">compile</span>(<span class="bu">String</span> code) {
	<span class="bu">Compiler</span> compiler = <span class="kw">new</span> <span class="bu">Compiler</span>();

	CompilerOptions options = <span class="kw">new</span> <span class="fu">CompilerOptions</span>();

	<span class="co">// See :</span>
	<span class="co">// closure-compiler/src/com/google/javascript/jscomp/CompilerOptions.java</span>
	<span class="co">// lines 2864-2896</span>
	options.<span class="fu">setLanguageIn</span>(LanguageMode.<span class="fu">ECMASCRIPT_2015</span>);
	options.<span class="fu">setLanguageOut</span>(LanguageMode.<span class="fu">ECMASCRIPT5_STRICT</span>);

	CompilationLevel
	    .<span class="fu">ADVANCED_OPTIMIZATIONS</span>
	    .<span class="fu">setOptionsForCompilationLevel</span>(options);

	<span class="bu">List</span>&lt;SourceFile&gt; list = <span class="kw">null</span>;

	<span class="kw">try</span> {
	    list =
		CommandLineRunner
		.<span class="fu">getBuiltinExterns</span>(CompilerOptions.<span class="fu">Environment</span>.<span class="fu">BROWSER</span>);
	} <span class="kw">catch</span> (<span class="bu">IOException</span> e) {
	    <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Exception raised&quot;</span>);
	}

	list.<span class="fu">add</span>(SourceFile.<span class="fu">fromCode</span>(<span class="st">&quot;input.js&quot;</span>, code));
	compiler.<span class="fu">compile</span>(<span class="kw">new</span> <span class="bu">ArrayList</span>&lt;SourceFile&gt;(), list, options);
	<span class="kw">return</span> compiler.<span class="fu">toSource</span>();
    }

    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {
      <span class="bu">String</span> compiled_code = <span class="fu">compile</span>(<span class="st">&quot;var a = 1 + 2; console.log(a)&quot;</span>);
      <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(compiled_code);
    }

}</code></pre></div>
<p>You‚Äôll need to have the Closure Compiler installed, on OS X this is easy with <code>brew install closure-compiler</code></p>
<p>Then in a new directory that you can use for this build, you can copy the <code>jar</code> from <code>/usr/local/Cellar/closure-compiler/20161201/libexec</code> to where the root is of your directory, let‚Äôs call that directory <code>build</code>.</p>
<p>Here‚Äôs a Makefile which will build, run the code.</p>
<div class="sourceCode"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span class="dv">blog_code:</span>
	javac -Xlint:deprecation -cp ./closure-compiler-v20161201.jar:./ com/hyegar/closure/CallCompiler.java
	java -cp ./closure-compiler-v20161201.jar:./ com.hyegar.closure.CallCompiler	</code></pre></div>]]></description>
    <pubDate>Mon, 09 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2017/01/09/calling-google-closure/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>variants in C++14 without boost</title>
    <link>http://hyegar.com/2017/01/08/variants-in-cpp/index.html</link>
    <description><![CDATA[<h1 id="variants-in-their-native-land">Variants in their native land</h1>
<p>One of the best parts of functional programming are <code>Algebraic Data Types</code>, also known as <code>Sum</code> types, also known as <code>variants</code>. They help you make more type safe programs, self-documenting code.</p>
<p>Here are some examples in <code>OCaml</code></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">type</span> &#39;a <span class="dt">option</span> = <span class="dt">Some</span> <span class="kw">of</span> &#39;a | <span class="dt">None</span></code></pre></div>
<p>This is the famous option type of functional programming. A fun thing about option is that its also a Monad, so <code>&gt;&gt;=</code> aka <code>bind</code> is easily defined as:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> ( &gt;&gt;= ) x f = <span class="kw">match</span> x <span class="kw">with</span> <span class="dt">Some</span> h -&gt; f h | _ -&gt; <span class="dt">None</span></code></pre></div>
<p>Another example recently added to the OCaml standard library is the result type.</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">type</span> (&#39;success, &#39;failure) result = Ok <span class="kw">of</span> &#39;success | Error <span class="kw">of</span> &#39;failure</code></pre></div>
<p>The things prefixed with <code>'</code> are called type variables, they let you write generic code from the getgo. We only need one for <code>option</code> but we need two different ones for result so that the type of the <code>Ok</code> variant need not be the same as the type of the <code>Error</code> variant.</p>
<p>Once you get an <code>result</code> value, you can pattern match on it:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> process_result = <span class="kw">function</span> 
  | Ok r -&gt; <span class="co">(* Do something with r *)</span>
  | Error reason -&gt; <span class="co">(* Do something with the error *)</span></code></pre></div>
<h1 id="variants-in-c">variants in C++</h1>
<p>In <code>C++</code> variants are not first class citizens of the language, so they need to be provided by a library. In modern <code>C++</code> our options are <code>C++17</code>‚Äôs <code>std::variant</code>, <code>boost::variant</code> or someone‚Äôs own rolled version.</p>
<p>I don‚Äôt want the <code>boost</code> dependency and I can‚Äôt use <code>C++17</code> so I looked for a library implementation. I found one by <a href="https://github.com/mapbox/variant">mapbox</a> and it fit my usecase perfectly; its a header only template library and I like the API provided. Here‚Äôs my implementation of <code>option</code> using the <code>mapbox</code> variant library.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// Let&#39;s assume this file is named optional.hpp</span>
<span class="pp">#pragma once</span>

<span class="pp">#include </span><span class="im">&lt;mapbox/variant.hpp&gt;</span>

<span class="kw">namespace</span> optional {
  <span class="kw">struct</span> None { };
  <span class="kw">template</span>&lt;<span class="kw">typename</span> T&gt;
  <span class="kw">struct</span> Some { T payload; };

  <span class="kw">template</span>&lt;<span class="kw">typename</span> T&gt;
  <span class="kw">struct</span> Optional : mapbox::util::variant&lt;None, Some&lt;T&gt;&gt; {
    <span class="kw">using</span> Base = mapbox::util::variant&lt;None, Some&lt;T&gt;&gt;;
    <span class="kw">using</span> Base::Base;
  };

  <span class="co">// These two are helper functions, like std::make_unique, etc.</span>
  <span class="kw">template</span>&lt;<span class="kw">typename</span> T&gt;
  <span class="kw">auto</span> some(T x)  { <span class="cf">return</span> Optional&lt;T&gt;{Some&lt;T&gt;{x}}; }

  <span class="kw">template</span>&lt;<span class="kw">typename</span> T&gt;
  <span class="kw">auto</span> none(<span class="dt">void</span>) { <span class="cf">return</span> Optional&lt;T&gt;{None{}}; }

}</code></pre></div>
<p>And here‚Äôs an example usage:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// Let&#39;s assume this file is named main.cpp</span>
<span class="pp">#include </span><span class="im">&lt;string&gt;</span>
<span class="pp">#include </span><span class="im">&lt;iostream&gt;</span>

<span class="pp">#include </span><span class="im">&quot;optional.hpp&quot;</span>

<span class="co">// This lets just make std::string just by adding a suffix of &#39;s&#39;</span>
<span class="co">// to things that otherwise look like char *</span>
<span class="kw">using</span> <span class="kw">namespace</span> <span class="bu">std::</span>literals<span class="bu">::</span>string_literals;

<span class="co">// Pretend that this is something that could fail.</span>
<span class="kw">auto</span> file_contents(<span class="dt">void</span>) {
  <span class="cf">return</span> optional::some(<span class="st">&quot;some file contents&quot;</span>s);
}

<span class="dt">int</span> main(<span class="dt">void</span>)
{
  file_contents()
    .match(
  	   [](optional::None) {
  	     <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;Check if file existed</span><span class="sc">\n</span><span class="st">&quot;</span>;
  	   },
  	   [](<span class="kw">auto</span> some) {
  	     <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;File contents: &quot;</span> &lt;&lt; some.payload;
  	   });
}</code></pre></div>
<p>and you can easily compile it with, assuming that you added mapbox/variant.hpp to your compiler‚Äôs include search path‚Ä¶</p>
<pre class="shell"><code>$ clang++ -std=c++14 main.cpp</code></pre>
<p>Happy coding.</p>]]></description>
    <pubDate>Sun, 08 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2017/01/08/variants-in-cpp/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>node's async, await, Promises.</title>
    <link>http://hyegar.com/2016/12/23/async-promises-node/index.html</link>
    <description><![CDATA[<p>While studying for interviews I‚Äôm talking breaks by working on <a href="https://github.com/fxfactorial/silicondzor">silicondzor.com</a></p>
<p>This is giving me some real web dev experience and I‚Äôm using the latest and greatest features of <code>JavaScript</code> and <code>node</code>.</p>
<p>One thing that I‚Äôm really liking in modern <code>JavaScript</code> is the <code>async</code> story, it reminds me a lot of <code>OCaml</code> and both are somewhat converging, i.e <code>ES6</code>‚Äôs introduction of Promises which are basically <code>'a Lwt.t</code>, and Lwt renaming <code>Lwt.t</code> into Promises in <code>2.7.0</code>.</p>
<p>Here‚Äôs like my conceptual cheatsheet about using <code>Promises</code> from scratch, converting an callback API into a <code>Promises</code> API and then taking it to the next step with <code>async</code>, <code>await</code>.</p>
<h1 id="basic-callback-apis">Basic callback APIs</h1>
<p><code>node</code> uses an event based programming paradigm and this is reflected in basically all server side code, ie the trailing callback argument to asynchronously call once the task completes.</p>
<p>Let‚Äôs simulate it with this function</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="co">// Plain CB based API</span>
<span class="kw">const</span> test_func <span class="op">=</span> (item<span class="op">,</span> cb) <span class="op">=&gt;</span> <span class="op">{</span>
  <span class="at">setTimeout</span>(() <span class="op">=&gt;</span> <span class="op">{</span>
    <span class="cf">if</span> (item <span class="op">&lt;</span> <span class="dv">5</span>) <span class="at">cb</span>(<span class="kw">null</span><span class="op">,</span> <span class="st">&#39;Success&#39;</span>)<span class="op">;</span>
    <span class="cf">else</span> <span class="at">cb</span>(<span class="kw">new</span> <span class="at">Error</span>(<span class="st">&#39;Oops&#39;</span>)<span class="op">,</span> <span class="kw">null</span>)<span class="op">;</span>
  <span class="op">},</span> <span class="dv">3000</span>)<span class="op">;</span>
<span class="op">};</span>

<span class="at">test_func</span>(<span class="dv">3</span><span class="op">,</span> (err<span class="op">,</span> success) <span class="op">=&gt;</span> <span class="va">console</span>.<span class="at">log</span>(success))<span class="op">;</span></code></pre></div>
<p>This models typical <code>node</code> code, the callback being called <code>three</code> seconds after execution of <code>test_func</code></p>
<p>This seems pretty fine for this example but once you have logic that is dependent on the success of one callback API after another then you start to have a difficult to reason about triangle of callbacks on the screen.</p>
<h1 id="promises">Promises</h1>
<p><code>ES6</code> introduces <code>Promises</code> and these are quite convienent, think of a Promise as being a box which will have a value in it sometime later.</p>
<p>We can turn any callback based API into a Promises based one.</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="co">// Promises based</span>
<span class="kw">const</span> test_func_promise <span class="op">=</span> item <span class="op">=&gt;</span> <span class="op">{</span>
  <span class="cf">return</span> <span class="kw">new</span> <span class="at">Promise</span>((accept<span class="op">,</span> reject) <span class="op">=&gt;</span> <span class="op">{</span>
    <span class="at">test_func</span>(item<span class="op">,</span> (err<span class="op">,</span> success) <span class="op">=&gt;</span> <span class="op">{</span>
      <span class="cf">if</span> (err) <span class="at">reject</span>(err)<span class="op">;</span>
      <span class="cf">else</span> <span class="at">accept</span>(success)<span class="op">;</span>
    <span class="op">}</span>)<span class="op">;</span>
  <span class="op">}</span>)<span class="op">;</span>
<span class="op">};</span>

<span class="at">test_func_promise</span>(<span class="dv">2</span>)
.<span class="at">then</span>(item <span class="op">=&gt;</span> <span class="op">{</span> <span class="va">console</span>.<span class="at">log</span>(<span class="st">&#39;Sucess!!&#39;</span><span class="op">,</span> item)<span class="op">;</span> <span class="op">}</span>)
.<span class="at">catch</span>(err <span class="op">=&gt;</span> <span class="va">console</span>.<span class="at">error</span>(err))<span class="op">;</span></code></pre></div>
<p>When you create a new <code>Promise</code> you need to provide it with two function, one to be called when there‚Äôs a success and when the Promise should fail. Hence when calling <code>test_func_promise</code> returns a Promise, not the value <code>'Success'</code>. Also if you use the plain Promises approach be sure to include a <code>.catch</code> call.</p>
<p>This is nicer than the original callback API approach, but now all your success or failure logic and everything following that effectively has to be all in either <code>.then</code> or <code>.catch</code> and that‚Äôs a bit awkward still.</p>
<h1 id="asyncawait">async/await</h1>
<p><code>ES7</code> introduced <code>async</code>, <code>await</code> where I basically think of the latter as <code>&gt;&gt;=</code> and <code>async</code> as sort of like <code>&gt;|=</code>. With <code>async</code>, <code>await</code> we can call <code>Promises</code> based code as if it was synchronous code.</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">const</span> test_func_async_example <span class="op">=</span> <span class="at">async</span> (item) <span class="op">=&gt;</span> <span class="op">{</span>
  <span class="cf">try</span> <span class="op">{</span>
    <span class="kw">const</span> result <span class="op">=</span> await <span class="at">test_func_promise</span>(item)<span class="op">;</span>
    <span class="va">console</span>.<span class="at">log</span>(<span class="vs">`Yay: </span><span class="sc">${</span>result<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span>
  <span class="op">}</span> <span class="cf">catch</span>(e) <span class="op">{</span>
    <span class="va">console</span>.<span class="at">error</span>(<span class="vs">`Messed up: </span><span class="sc">${</span>e<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span>
  <span class="op">}</span>
<span class="op">};</span>

<span class="at">test_func_async_example</span>(<span class="dv">6</span>)<span class="op">;</span>
<span class="at">test_func_async_example</span>(<span class="dv">3</span>)<span class="op">;</span></code></pre></div>
<p>First notice how whatever function we use <code>await</code> inside of, we need to tag that function with <code>async</code> and now this function returns a <code>Promise</code></p>
<p>Now when we call <code>test_func_promises</code> with <code>await</code> prefixed, then we get the value that the <code>Promise</code> resolved. Also whatever the <code>reject</code> condition of the <code>Promise</code> was then becomes the exception of the <code>catch</code> following the <code>await</code> usage.</p>
<h1 id="summary">Summary</h1>
<p><code>async</code>, <code>await</code> are very powerful features of <code>ES7</code>, <code>Promises</code> are from <code>ES6</code>. Not every <code>JavaScript</code> engine supports <code>ES7</code> so you‚Äôll have to use <code>babel</code> to compile your <code>async</code>, <code>await</code> to runnable code; basically turns the <code>async</code>, <code>await</code> to generators (also an amazing topic).</p>
<p>On newer versions of node, I‚Äôm using <code>v7.3.0</code>, you can turn on features from the future with command line arguments. Check all of them with:</p>
<pre><code>$ node --v8-options | less</code></pre>
<p>I‚Äôm turning on native <code>async</code>, <code>await</code> with <code>--harmony_async_await</code>, so my final invocation is:</p>
<pre><code>$ node --harmony_async_await test.js</code></pre>
<p>You can get all the code as one script <a href="https://gist.github.com/fxfactorial/60edd7c3c8948754d21dbc9f517e37ee">here</a></p>]]></description>
    <pubDate>Fri, 23 Dec 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/12/23/async-promises-node/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Using JavaScriptCore with examples</title>
    <link>http://hyegar.com/2016/11/03/using-javascriptcore/index.html</link>
    <description><![CDATA[<h2 id="motivation">Motivation</h2>
<p>I like mixing languages and I especially like <code>OCaml</code>, <code>JavaScript</code>. Lately I‚Äôve been writing <code>OCaml</code> bindings to <code>JavaScriptCore</code>, JSC is what underpins Safari both iOS and desktop variants, and ReactNative. When you‚Äôre writing bindings, you kinda need to know the <code>C/C++</code> library that you‚Äôre binding to.</p>
<h2 id="example">Example</h2>
<p>We‚Äôre going to provide a pretty meaty example, we‚Äôll make a custom object in C++ code, then we‚Äôll use it from a <code>JavaScript</code> script. Imagine we want to expose a <code>File</code> like object, JS the language itself has no notion of a File, so it will need support from the C/C++ level; you can imagine this as the objects that say <code>[native code]</code>.</p>
<p>Here‚Äôs the code, afterwards is a detailed breakdown (The <code>R</code> C++ feature confuses the syntax highlighter)</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="pp">#include </span><span class="im">&lt;string&gt;</span>
<span class="pp">#include </span><span class="im">&lt;iostream&gt;</span>
<span class="pp">#include </span><span class="im">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span>

<span class="bu">std::</span>string getcwd_string(<span class="dt">void</span>)
{
   <span class="dt">char</span> buff[PATH_MAX];
   getcwd(buff, PATH_MAX);
   <span class="bu">std::</span>string cwd(buff);
   <span class="cf">return</span> cwd;
}

<span class="at">const</span> <span class="dt">char</span>*
jsvalue_to_utf8_string(JSGlobalContextRef ctx, JSValueRef v)
{
  JSStringRef valueAsString = JSValueToStringCopy(ctx, v, NULL);
  <span class="dt">size_t</span> jsSize = JSStringGetMaximumUTF8CStringSize(valueAsString);
  <span class="dt">char</span>* jsBuffer = (<span class="dt">char</span>*)malloc(jsSize);
  JSStringGetUTF8CString(valueAsString, jsBuffer, jsSize);
  JSStringRelease(valueAsString);
  <span class="cf">return</span> jsBuffer;
}

<span class="dt">void</span> run_example(<span class="dt">void</span>)
{
  JSClassDefinition definition = kJSClassDefinitionEmpty;
  definition.className = <span class="st">&quot;File&quot;</span>;
  definition.callAsConstructor = [](<span class="kw">auto</span> ctx,
				    <span class="kw">auto</span> object,
				    <span class="kw">auto</span> argumentCount,
				    <span class="kw">auto</span> arguments[],
				    <span class="kw">auto</span> *exception) -&gt; JSObjectRef {
    <span class="kw">auto</span> file_name =
    JSValueMakeString(ctx, JSStringCreateWithUTF8CString(getcwd_string().c_str()));
    <span class="kw">auto</span> prop_name = JSStringCreateWithUTF8CString(<span class="st">&quot;cwdName&quot;</span>);
    <span class="kw">auto</span> example_obj = JSObjectMake(ctx, <span class="kw">nullptr</span>, <span class="kw">nullptr</span>);

    JSObjectSetProperty(ctx,
			example_obj,
			prop_name,
			file_name,
			kJSPropertyAttributeNone,
			<span class="kw">nullptr</span>);
    <span class="cf">return</span> example_obj;
  };

  <span class="kw">auto</span> ctx = JSGlobalContextCreate(<span class="kw">nullptr</span>);
  <span class="kw">auto</span> js_example_class = JSClassCreate(&amp;definition);
  <span class="kw">auto</span> example_obj = JSObjectMake(ctx, js_example_class, <span class="kw">nullptr</span>);
  <span class="co">// auto called_result = JSObjectCallAsConstructor(ctx, example_obj, 0, nullptr, nullptr);</span>
  <span class="co">// auto property_check =</span>
  <span class="co">//   JSObjectGetProperty(ctx,</span>
  <span class="co">// 			called_result,</span>
  <span class="co">// 			JSStringCreateWithUTF8CString(&quot;cwdName&quot;),</span>
  <span class="co">// 			nullptr);</span>

  <span class="co">// std::cout &lt;&lt; jsvalue_to_utf8_string(ctx, property_check) &lt;&lt; std::endl;</span>
  <span class="bu">std::</span>string code_to_eval = <span class="st">R&quot;(</span>
<span class="st">const example_code = new File;</span>
<span class="st">example_code.cwdName;</span>
<span class="st">)&quot;;</span>
<span class="st">  JSValueRef exn;</span>

<span class="st">  auto global_object = JSContextGetGlobalObject(ctx);</span>
<span class="st">  JSObjectSetProperty(ctx,</span>
<span class="st">		      global_object,</span>
<span class="st">		      JSStringCreateWithUTF8CString(&quot;File&quot;),</span>
<span class="st">		      example_obj,</span>
<span class="st">		      kJSPropertyAttributeNone,</span>
<span class="st">		      nullptr);</span>

<span class="st">  auto sanity_check =</span>
<span class="st">    JSEvaluateScript(ctx,</span>
<span class="st">		     JSStringCreateWithUTF8CString(code_to_eval.c_str()),</span>
<span class="st">		     nullptr,</span>
<span class="st">		     nullptr,</span>
<span class="st">		     1,</span>
<span class="st">		     &amp;exn);</span>
<span class="st">  if (exn)</span>
<span class="st">    std::cout &lt;&lt; jsvalue_to_utf8_string(ctx, exn) &lt;&lt; std::endl;</span>

<span class="st">  std::cout &lt;&lt; jsvalue_to_utf8_string(ctx, sanity_check) &lt;&lt; std::endl;</span>
<span class="st">}</span>

<span class="st">int main(int argc, char **argv)</span>
<span class="st">{</span>
<span class="st">  run_example();</span>
<span class="st">  return 0;</span>
<span class="st">}</span></code></pre></div>
<p>compile with, should work just fine on Linux as well, but using:</p>
<p><code>libjavascriptcoregtk-4.0</code> instead of the <code>-framework JavaScriptCore</code></p>
<pre class="shell"><code>$ clang++ -framework JavaScriptCore -std=c++14 jsc_examples.cpp -oF </code></pre>
<h2 id="explanations">Explanations</h2>
<p>The real meat of the code starts at <code>run_example</code>. We start by creating a <code>JSClassDefinition</code>, this creates a template that lets us control all the behavior of our custom object. Then we provide an implementation for what code ought to be run when our custom object will created with <code>new</code>, notice using <code>C++14</code>‚Äôs nice ability to use <code>auto</code> for the parameter names, also notice that we explicitly have to give back the return type of <code>JSObjectRef</code>, you get a bit spoiled by the <code>OCaml</code> type system. Then we create a <code>JavaScript</code> object, set the property <code>cwdName</code> and return that new object from the constructor call.</p>
<p>Then we need to make a global context, this is like the environment that your JavaScript runs in and we grab the global object out of it, like <code>window</code> in the browser. (The commented out code is if you wanted to call the constructor and get the result directly in code)</p>
<p>We set the class object as a property to the global, aka like doing <code>window.d3 = //d3's code</code>. Then we evaluate a script, some fun trival all your <code>&lt;script&gt;</code> tags actually have a return value, its the last value.</p>
<p>Tada.</p>
<p>FWIW I‚Äôm doing the OCaml bindings <a href="https://github.com/fxfactorial/ocaml-javascriptcore">here</a> github stars appreciated :)</p>]]></description>
    <pubDate>Thu, 03 Nov 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/11/03/using-javascriptcore/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>ReactJS, JSX, async/await, babel, webpack and getting it all working</title>
    <link>http://hyegar.com/2016/09/20/webdev-setup/index.html</link>
    <description><![CDATA[<h3 id="stranger-in-a-strange-land">Stranger in a strange land</h3>
<p>I‚Äôm not primarily a front-end dev so getting everything setup and configured for web development is particularly frustrating for me and most blog posts, tutorials don‚Äôt actually give explanations, just copy-pasting blindly tons of little configs.</p>
<p>Here‚Äôs my post that I‚Äôm using as reference for me and hopefully for any other non-frontend developer that wants to use the latest and greatest <code>JavaScript</code> like <code>fetch</code>, <code>async</code>, <code>await</code>, <code>React</code>, <code>JSX</code>.</p>
<h3 id="getting-started-compiling-javascript-to-javascript">Getting started, compiling JavaScript to ‚Ä¶JavaScript</h3>
<p>Because of fragmentation in implementations of the latest <code>JavaScript</code> features, we‚Äôll use <code>babel</code> to compile our <code>JavaScript</code> using the latest features to <code>JavaScript</code> that will work in <code>Chrome</code>, <code>Firefox</code> and <code>Safari</code>.</p>
<p><code>babel</code> has a concept of <code>plugins</code>. These are like features that you can turn on during the compilation steps and are pretty granular. Often you‚Äôll want a whole bunch of plugins together and that is so common enough that <code>babel</code> has something called <code>presets</code>. You can put that in separate <code>.babelrc</code> file, but I prefer not having so much silly little config files, so you can also put it in your package.json; example:</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"> <span class="st">&quot;babel&quot;</span><span class="op">:</span> <span class="op">{</span>
    <span class="st">&quot;presets&quot;</span><span class="op">:</span> [
      <span class="st">&quot;react&quot;</span><span class="op">,</span>
      <span class="st">&quot;es2015&quot;</span><span class="op">,</span>
      <span class="st">&quot;stage-3&quot;</span>
    ]<span class="op">,</span>
    <span class="st">&quot;plugins&quot;</span><span class="op">:</span> [
        <span class="st">&quot;transform-es2015-modules-commonjs&quot;</span><span class="op">,</span>
        <span class="st">&quot;transform-async-to-generator&quot;</span><span class="op">,</span>
        <span class="st">&quot;transform-runtime&quot;</span>
    ]
  <span class="op">}</span></code></pre></div>
<p>These are the ones I‚Äôm using to compile <code>JSX</code>, use ES6 modules, and <code>async</code>, <code>await</code>.</p>
<p>So when you invoke <code>babel</code>, it will look at the <code>package.json</code>, see the <code>babel</code> field and turn on those features, so an example invocation is:</p>
<pre class="shell"><code>$ babel lib --out-dir dist</code></pre>
<p>which will compile all the code in the <code>lib</code> directory and output the results in the <code>dist</code> directory. This process is the same for <code>node</code>.</p>
<h3 id="bundling-code">Bundling code</h3>
<p>Now we have our legal <code>JavaScript</code> for today‚Äôs browsers/node. We can bundle up everything as a single <code>JavaScript</code> file using <code>webpack</code>. I previously used <code>browserify</code> but like all things web, apparently its not hot anymore. We can invoke it like so:</p>
<pre class="shell"><code>$ webpack --progress --colors dist/homepage.js bundle.js</code></pre>
<p>where <code>bundle.js</code> is the name of the single output file that we‚Äôll get. You can apparently do some kind of config file for webpack, yet another config file, but this is enough for me right now.</p>
<h3 id="actual-codeproject-with-jsx">Actual code/project with JSX</h3>
<p>So let‚Äôs say we have these two files, one is <code>homepage.jsx</code> and the other is <code>button.jsx</code>. Note that I use a real example of <code>async</code>, <code>await</code>, for a great explanation see <a href="https://zeit.co/blog/async-and-await">here</a>, for <code>OCaml</code> programmers, <code>await</code> is basically <code>&gt;&gt;=</code> or <code>let%lwt</code>.</p>
<p>This is <code>button.jsx</code></p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="st">&#39;use strict&#39;</span><span class="op">;</span>
<span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span>

<span class="kw">class</span> Button <span class="kw">extends</span> <span class="va">React</span>.<span class="at">Component</span> <span class="op">{</span>

  async <span class="at">do_request</span>(e) <span class="op">{</span>
    <span class="kw">let</span> query <span class="op">=</span>
	<span class="st">&#39;https://api.bitcoinaverage.com&#39;</span> <span class="op">+</span>
	<span class="st">&#39;/ticker/global/USD&#39;</span><span class="op">;</span>
    <span class="kw">let</span> nonsense <span class="op">=</span> <span class="st">&quot;https://foo.bar&quot;</span><span class="op">;</span>
    <span class="cf">try</span> <span class="op">{</span>
      <span class="kw">let</span> pulled <span class="op">=</span> await <span class="at">fetch</span>(query)<span class="op">;</span>
      <span class="kw">let</span> body <span class="op">=</span> await <span class="va">pulled</span>.<span class="at">json</span>()<span class="op">;</span>
      <span class="va">console</span>.<span class="at">log</span>(body)<span class="op">;</span>

      await <span class="at">fetch</span>(nonsense)<span class="op">;</span>

    <span class="op">}</span> <span class="cf">catch</span> (e) <span class="op">{</span>
      <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Exception raised:&quot;</span><span class="op">,</span> e)<span class="op">;</span>
      <span class="va">console</span>.<span class="at">log</span>(<span class="st">&#39;Logic continued&#39;</span>)<span class="op">;</span>
    <span class="op">}</span>
  <span class="op">}</span>

  <span class="at">render</span> () <span class="op">{</span>
    <span class="kw">let</span> s <span class="op">=</span> <span class="op">{</span><span class="dt">color</span><span class="op">:</span><span class="st">&#39;red&#39;</span><span class="op">};</span>
    <span class="cf">return</span> (
      <span class="op">&lt;</span>p style<span class="op">={</span>s<span class="op">}</span>
	 onClick<span class="op">={</span><span class="kw">this</span>.<span class="va">do_request</span>.<span class="at">bind</span>(<span class="kw">this</span>)<span class="op">}&gt;</span>
	Click Me
      <span class="op">&lt;</span><span class="ss">/p&gt;</span>
<span class="ss">    </span><span class="sc">)</span><span class="ss">;</span>
<span class="ss">  }</span>
<span class="ss">};</span>
<span class="ss">// Remember to put wrap in {}</span>
<span class="ss">export {Button};</span></code></pre></div>
<p>and <code>homepage.jsx</code></p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="st">&#39;use strict&#39;</span><span class="op">;</span>

<span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span>
<span class="im">import</span> ReactDOM <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span>
<span class="co">// REMEMBER to do {} since button.jsx doesn&#39;t do</span>
<span class="co">// export default</span>
<span class="im">import</span> <span class="op">{</span>Button<span class="op">}</span> <span class="im">from</span> <span class="st">&#39;./button&#39;</span><span class="op">;</span>

<span class="kw">class</span> Page <span class="kw">extends</span> <span class="va">React</span>.<span class="at">Component</span> <span class="op">{</span>
  <span class="at">render</span> () <span class="op">{</span>
    <span class="cf">return</span> (
      <span class="op">&lt;</span>div<span class="op">&gt;</span>
	Hello World
	<span class="op">&lt;</span>Button/<span class="op">&gt;</span>
      <span class="op">&lt;</span><span class="ss">/div&gt;</span>
<span class="ss">    </span><span class="sc">)</span><span class="ss">;</span>
<span class="ss">  }</span>
<span class="ss">};</span>

<span class="ss">ReactDOM.render</span><span class="sc">(</span><span class="ss">&lt;Page/</span><span class="op">&gt;,</span>
		<span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;cont&#39;</span>))<span class="op">;</span></code></pre></div>
<p>So all this will be compiled correctly and turned into one <code>bundle.js</code> which we can use in this <code>index.html</code></p>
<div class="sourceCode"><pre class="sourceCode html"><code class="sourceCode html"><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span>
<span class="kw">&lt;meta</span><span class="ot"> charset=</span><span class="st">&quot;utf-8&quot;</span><span class="kw">&gt;</span>
<span class="kw">&lt;body&gt;</span>
  <span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;cont&quot;</span><span class="kw">&gt;&lt;/div&gt;</span>
  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;bundle.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span>
<span class="kw">&lt;/body&gt;</span></code></pre></div>
<p>and when we click the button we see this in the Chrome dev tools:</p>
<pre><code>Object {24h_avg: 614.98, ask: 613.72, bid: 613.05, last: 613.56, timestamp: &quot;Tue, 20 Sep 2016 20:09:30 -0000&quot;‚Ä¶}
bundle.js:23085 GET https://foo.bar/ net::ERR_NAME_NOT_RESOLVED_callee$ @ bundle.js:23085tryCatch @ bundle.js:23242invoke @ bundle.js:23516prototype.(anonymous function) @ bundle.js:23275step @ bundle.js:23872(anonymous function) @ bundle.js:23883
bundle.js:23095 Exception raised: TypeError: Failed to fetch(‚Ä¶)
bundle.js:23096 Logic continued</code></pre>
<p>Yay, things worked.</p>
<p>See the repo <a href="https://github.com/fxfactorial/react-example-with-async-await-babel">here</a> for the full <code>package.json</code></p>]]></description>
    <pubDate>Tue, 20 Sep 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/09/20/webdev-setup/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>

    </channel>
</rss>
